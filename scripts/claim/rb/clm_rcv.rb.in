#!%RUBY%
# coding : euc-jp

# claim test Rcv server script
#   args  0:[port]
# 
# version 1.3.0
#                  '01-10-30 by Ymmt
# version 1.4.0 マルチスレッド対応
#                  '02-11-12 by hiki
# version 1.4.1 １秒中の複数受信対応
#               後ろに、受信の度にカウントアップされる番号を付加している
#                  '03-10-15 by hiki
# version 1.4.2 途中で接続が切れたり、nmapコマンドへの対策
#                  '05-02-08 by hiki
# version 1.4.3 fix correction of socket opening.
#                  '2011-02-09
# version 1.4.4 ソケットオープン失敗時の無限ループを修正.
#               ログ出力を追加.
#                  '2011-11-30

$DEBUG = false

Dir.chdir(File.dirname(__FILE__))

require 'socket'
require_relative 'xml_valid.rb'

$default_port = "8210"

if ARGV.length == 0
  $port = $default_port
else
  $port = ARGV[0]
end

$dtdfl = "../../../scripts/claim/dtd/MML1014_euc.dtd"
$file_path = "/var/tmp"
$logfl = "/tmp/claim_rcv.log"

$sh_path_name = "../../../scripts/claim/HL03.sh"
$seq_put = 0        # 格納時にセットした識別番号
$seq_exec = 0       # 実行中識別番号
$seq_max = 32767    # 識別番号の最大値
$thr_sleeptime = 1  # スレッドの順序待ち時のsleep時間
$fname_seq = 0      # 受信カウンタ(ファイル名に使用する)

# 例外クラス
class ConnectError < StandardError ; end
class CReadError < StandardError ; end

class FileSockRcv
  def initialize(fl, s)
    @fl_path_name = fl
    @sckt = s
    @eot = 0x04.chr
  end

  def Log(text)
    print text
    open($logfl, "a") do |log|
      log.puts("SockLog: #{text}")
    end
  end

  def start
    open(@fl_path_name, "wb") do |f|
      buf = ""
      begin
        while @eot != (buf = @sckt.read(1))
          if buf == nil
            # ソケット接続が切れた
            Log("Connect Error: read socket data is nil")
            raise ConnectError, 'read socket data is nil.'
          end
          print buf
          f.print buf
        end
      rescue ConnectError
        # 途中で接続が切れた場合への対応
        Log("Connect Error")
        raise ConnectError, ''
      rescue
        # nmapコマンドへの対応
        Log("CRead Error: socket read error")
        raise CReadError, 'socket read error.'
      end
    end
  end
end

class SndRsp
  def initialize(s)
    @sckt = s
    @ack = 0x06.chr
    @nak = 0x15.chr
  end

  def ok
    @sckt << @ack
  end

  def ng
    @sckt << @nak
  end
end

# マルチスレッド時に実行するクラス
class ExecThreadMain
  # コンストラクタ
  #
  #   引数
  #     seq      <= 生成スレッドのシーケンシャル番号(0〜32767)
  #     sh_path  <= 起動シェルのフルパス名
  #     xml_path <= 読み込みXMLファイルのフルパス名
  #     out_file <= 出力テキストファイル名
  #
  #   注意
  #     $seq_putの値は、スレッドに値を渡してからカウントアップしてください。
  #
  def initialize(seq, sh_path, xml_path, out_file)
    # シーケンシャル番号をクラス変数領域に保存
    @thr_seq = seq
    @sh_pathname = sh_path
    @xml_pathname = xml_path
    @out_filename = out_file
  end


  # デコードメイン処理
  def decode_main
    `#{@sh_pathname} #{@xml_pathname} #{@out_filename}`
  end


  # 実行待ち関数
  # 格納識別番号と実行識別番号の比較とウエイト処理と格納識別番号のカウントアップ
  def exec_start
    while @thr_seq != $seq_exec
      # 順序待ち
      sleep $thr_sleeptime
    end
  end


  # 実行完了関数
  # 実行識別番号のカウントアップ
  def exec_end
    $seq_exec += 1
    if $seq_exec > $seq_max
      $seq_exec = 0
    end
  end


  # スレッドメイン処理
  # ここから、順次実行待ち・処理実行を呼び出す(public)
  def main
    exec_start  # 順序待ち
    decode_main # 順次実行
    exec_end    # 処理終了通知
  end

  public  :main
  private :decode_main
  private :exec_start
  private :exec_end
end

class ClaimRcv
  def initialize
    require 'date'
    @claim_log = "/var/tmp/claim_err_#{Date.today.to_s}.log"
  end

  def file_chk(fl)
    if File.exists?(fl)
      ans = fl + " exists. Overwrite!"
    else 
      ans = fl + " is New file!"
    end
  end

  def make_file_name
    name_A = "claim_rcv_" + Time.now.strftime("%m%d_%H%M%S")
    name_B = "_" + sprintf("%02d", $fname_seq) + ".xml"
    flname = name_A + name_B
    $fname_seq += 1
    if $fname_seq > 99
      $fname_seq = 0
    end
    return flname
  end

  def socket_thread(sock)
    Log("Client login\n")

    file_path_name = File.join($file_path, make_file_name)
    Log(file_chk(file_path_name) + "\n")

    rcvbuf = FileSockRcv.new(file_path_name, sock)
    ans = SndRsp.new(sock)
    
    Log("Start Receiving File --------------------------\n")

    begin
      rcvbuf.start
    rescue ConnectError, CReadError
      Log("Connection Error\n")
      Log("Client disconnects\n")
      sock.close
      sock = nil
      Log("temporary file delete.\n")
      File.delete(file_path_name)
    else
      Log("Complete Receiving File -----------------------\n")
    
      # convert claim data J-code to UTF8
      Log("Convert to UTF-8\n")
      u8_file = file_path_name.gsub(/.xml$/, "_u8.xml")
      `%RUBY% xml_jcnv.rb #{file_path_name} tou8 -f > #{u8_file}`  
      file_path_name = u8_file

      # check claim data and send respons to client
      Log("Claim valid check\n")
      if parser_check(file_path_name, $dtdfl, $logfl)
        Log("Send [ack] to client\n")
        ans.ok
        valid_check_flg = true
      else
        Log("Send [nak] to client\n")
        ans.ng
        valid_check_flg = false
      end

      #  kick shell script ( decode(ruby) and cobol) )
      if valid_check_flg
        out_file = file_path_name.gsub(/_u8.xml$/, ".txt")
        Log("Decode claim data to #{out_file} and kick COBOL\n")
        Log("#{$sh_path_name} #{file_path_name} #{out_file}\n\n")

        # スレッドの生成処理
        thr_execflg = 0
        #Thread.start {
          if $DEBUG
            Log("Thread Start[" + String($seq_put + 1) + "]\n")
            Log("Thread Start[" + String($seq_put + 1) + "]\n")
            thr_start_time = ''; thr_end_time = ''
            thr_start_time = Time.now.strftime("%H:%M:%S")
          end

          thr = nil
          # スレッド生成メイン処理
          thr = ExecThreadMain.new($seq_put, $sh_path_name, file_path_name, out_file)
          $seq_put += 1
          if $seq_put > $seq_max
            $seq_put = 0
          end

          thr_execflg = 1
          # メイン処理
          thr.main

          if $DEBUG
            thr_end_time = Time.now.strftime("%H:%M:%S")
            Log("Thread End[" + String($seq_exec) + "] ")
            Log("[" + thr_start_time + "〜" + thr_end_time + "]\n")
            Log("End Sequence NO. = [" + String($seq_put) + "]\n")
          end
        #}

        # スレッド生成のウエイト処理
        while thr_execflg == 0
          sleep 1
        end
      end
    end
  end

  def Log_Save(claim_log=@claim_log)
    File.open(claim_log, "a+") do |file|
      STDOUT.reopen(file)
      STDERR.reopen(file)
    end
  end

  def Log(text)
    print text
    open($logfl, "a") do |log|
      log.puts("Log: #{text}")
    end
  end

  def Reception
    begin
      Log("server:>> ")
      @gsock = TCPServer.open($port)

      Log("No #{$port} port open ")
      Log("[" + Time.now.strftime("%H:%M:%S") + "]\n")
      Log("Waiting...\n")

      while true
        Thread.start(@gsock.accept) do |sock|
          socket_thread(sock)
          Log("Close port [" + Time.now.strftime("%H:%M:%S") + "]\n")
          Log("Client disconnects\n")
          sock.close if sock != nil
        end
      end
    rescue Errno::EADDRINUSE => error
      Log("Error:#{error}\n")
    rescue => error
      Log("Error:#{error}\n")
      retry
    end
    @gsock.close if @gsock != nil
  end
end

if __FILE__ == $0
  claim = ClaimRcv.new
  claim.Reception
end
