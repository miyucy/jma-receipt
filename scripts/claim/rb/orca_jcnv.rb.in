#!%RUBY%
# coding : euc-jp

# XMLfile j-code convert scirpt
#     args 0:in_file
#          1:out_file
#          2:out_code
#          3:mode

require 'kconv'
require 'nkf'


# @jcnv_debug = 1	# DebugModeである

if __FILE__ == $0
	# このスクリプトを単独で起動した

	in_file, out_file, out_code, mode = ARGV

end


# ------------------------------------------------------------


# XMLファイルの文字コード変換処理
#    引数
# in_word       - 変換対象文字列 [IN / String型]
# after_code    - 変換後文字列コード [IN / String型]
#   1 - EUC
#   2 - Shift_JIS
#   3 - UTF-8
#   4 - JISコード
# linefeed_code - 変換後の改行コード
#   1 - UNIX系改行コード(LF(0xa)のみ)
#   2 - Machintosh系改行コード(CR(0xd)のみ)
#   3 - Windows系改行コード(CR(0xd)+LF(0xa))
# exec_mode     - 変換実行モード [IN / String型]
#   1 - 通常実行
#   2 - エラーがあっても、実行
#    戻り値
# 配列形式
# [0] = 終了ステータス
#       0 - 正常終了
#      -1 - 変換前文字コードの指定が不正(この関数内部のエラー)
#      -2 - 変換後文字コードの指定が不正(引数の指定が不正)
#      -3 - 変換前改行コードの指定が不正(関数内部のエラー)
#      -4 - 変換後改行コードの指定が不正(引数の指定が不正)
#      -5 - 変換前対象文字列に改行コードがないか不明です(引数の指定が不正)
#      -6 - 変換後文字コードの指定が不正(引数の指定が不正)
#      -7 - 最初の行の文字コード指定がないか不正です(引数の指定が不正)
#      -8 - 「Kconv::guess」での判定結果、文字コードが対応していないか不明
#      -9 - 「Kconv::guess」からの戻り値が不正(発生した場合、原因調査が必要)
#     -10 - XMLのencodeとKconvの判定結果が異なる(入力文字のコードが不正)
# [1] = 変換後文字列
# [2] = エラーメッセージ(エラーがない場合、nil)
#    備考
# ※※※注意！！！　注意！！！　注意！！！※※※
# ファイルへ書き込む際は、open関数の引数にかならず「"wb"」と、
#   バイナリ指定での書き込みを行ってください。
def xml_code_conversion(in_word, after_code, linefeed_code, exec_mode)
	ret = [0, '']

# ****************************************
$stderr.puts '[xml_code_conversion] Start'			if @jcnv_debug == 1
# ****************************************

	# 1行目を取得し、文字判定
	# 改行コードの取得
	lf_code = get_linefeed_code(in_word)
	if lf_code == nil
		ret = [-5, nil, '改行コードが存在しないか、不明です']
		return ret
	end
	# 最初の改行までの文字を取得
	first_word = in_word[0, in_word.index(lf_code)]


	# 変換後文字コードの種類の取得
	case	after_code
	when	1	# EUC
		after_word = 'EUC-JP'
	when	2	# Shift_JIS
		after_word = 'Shift_JIS'
	when	3	# UTF-8
		after_word = 'UTF-8'
	when	4	# JISコード
		after_word = 'JIS'
	else
		ret = [-6, nil, '変換後文字コードの指定が不正です(after_code = [' + String(after_code) + '])']
		return ret
	end


	# 変換前文字コードの取得
	case	first_word
	when /euc/i
		before_code = 1
		before_word = 'EUC-JP'
	when /shift-jis/i
		before_code = 2
		before_word = 'Shift-JIS'
	when /shift_jis/i
		before_code = 2
		before_word = 'Shift_JIS'
	when /utf-8/i
		before_code = 3
		before_word = 'UTF-8'
	when /jis/i
		before_code = 4
		before_word = 'JIS'
	else
		ret = [-7, nil, '最初の行の文字コード指定がないか不正です']
		return ret
	end

	# 文字コード判定
	kconv_code = Kconv::guess(in_word)
	case	kconv_code
	when	Kconv::UNKNOWN		# 文字コードは、不明
		# １行目の文字コードを、そのまま採用する
	when	Kconv::EUC			# 文字コードはEUCコード
		if before_code != 1
			# １行目の文字列と実際の文字コードが異なる
			if exec_mode == 1
				# 異常終了させる
				ret = [-10, nil, 'XMLのencodeとKconvの判定結果が異なります(Kconv=EUC, before_code=' + String(before_code) + ')']
				return ret
			else
				# 強制続行
				# エラーメッセージの出力
      			$stderr.print " orca_jcnv Warrning : XMLのencodeとKconvの判定結果が異なります\n"
			end
		end
	when	Kconv::SJIS			# 文字コードは、シフトJISコードか、UTF-8コード
		if before_code != 2 and before_code != 3
			# １行目の文字列と実際の文字コードが異なる
			if exec_mode == 1
				# 異常終了させる
				ret = [-10, nil, 'XMLのencodeとKconvの判定結果が異なります(Kconv=SJIS, before_code=' + String(before_code) + ')']
				return ret
			else
				# 強制続行
				# エラーメッセージの出力
      			$stderr.print " orca_jcnv Warrning : XMLのencodeとKconvの判定結果が異なります\n"
			end
		end
	when	Kconv::JIS			# 文字コードはJISコード
		if before_code != 4
			# １行目の文字列と実際の文字コードが異なる
			if exec_mode == 1
				# 異常終了させる
				ret = [-10, nil, 'XMLのencodeとKconvの判定結果が異なります(Kconv=JIS, before_code=' + String(before_code) + ')']
				return ret
			else
				# 強制続行
				# エラーメッセージの出力
      			$stderr.print " orca_jcnv Warrning : XMLのencodeとKconvの判定結果が異なります\n"
			end
		end
	when	Kconv::BINARY		# 文字コードは、不明？
		ret = [-8, nil, '「Kconv::guess」での判定結果、文字コードが対応していないか不明です(ret = [' + String(kconv_code) + '])']
		return ret
	else
		ret = [-9, nil, '「Kconv::guess」からの戻り値が不正です(ret = [' + String(kconv_code) + '])']
		return ret
	end


	# １行目のencodeの変換
	word2 = in_word.sub(/#{before_word}/i, after_word)


	# 文字コードの変換メイン処理
	ret = word_code_conversion(word2, before_code, after_code, linefeed_code)

# ****************************************
$stderr.puts '[xml_code_conversion] End'			if @jcnv_debug == 1
# ****************************************

	return ret
end



# ------------------------------------------------------------


# 改行コードの判定・取得処理
#    引数
# in_word - 判定したい文字列
#    戻り値
# 改行文字コード
#  nil = 改行コードが存在しないか不明
#  \xa = UNIX系改行コード
#  \xd = Macintosh系改行コード
#  \xd\xa = Windows系改行コード
def get_linefeed_code(in_word)
	ret = nil

	if in_word =~ /\xd\xa/
		# Windows系の改行コードである
		ret = "\xd\xa"
	else
		if in_word =~ /\xa/
			# UNIX系の改行コードである
			ret = "\xa"
		else
			if in_word =~ /\xd/
				# Machintosh系の改行コードである
				ret = "\xd"
			else
			end
		end
	end

	return ret
end



# ------------------------------------------------------------


# 文字コード変換処理
#    引数
# in_word       - 変換対象文字列 [IN / String型]
# before_code   - 変換前文字列コード [IN / String型]
#   1 - EUC
#   2 - Shift_JIS
#   3 - UTF-8
#   4 - JISコード
# after_code    - 変換後文字列コード [IN / String型]
#   1 - EUC
#   2 - Shift_JIS
#   3 - UTF-8
#   4 - JISコード
# linefeed_code - 変換後の改行コード
#   1 - UNIX系改行コード(LF(0xa)のみ)
#   2 - Machintosh系改行コード(CR(0xd)のみ)
#   3 - Windows系改行コード(CR(0xd)+LF(0xa))
#    戻り値
# 配列形式
# [0] = 終了ステータス
#       0 - 正常終了
#      -1 - 変換前文字コードの指定が不正(引数の指定が不正)
#      -2 - 変換後文字コードの指定が不正(引数の指定が不正)
#      -3 - 変換前改行コードの指定が不正(この関数内部のエラー)
#      -4 - 変換後改行コードの指定が不正
# [1] = 変換後文字列
# [2] = エラーメッセージ(エラーがない場合、nil)
#    備考
# ※※※注意！！！　注意！！！　注意！！！※※※
# ファイルへ書き込む際は、open関数の引数にかならず「"wb"」と、
#   バイナリ指定での書き込みを行ってください。
def word_code_conversion(in_word, before_code, after_code, linefeed_code)
	ret = [0, '']
	word1 = ''	# 一時的な文字列領域

# ****************************************
$stderr.puts '[word_code_conversion] Start'			if @jcnv_debug == 1
# ****************************************

	# 変換前改行コードの識別
	case	get_linefeed_code(in_word)
	when	nil	# 改行コードがないか不明
		# 改行コードは、もとと同じとする
		before_lfcode = linefeed_code
	when	"\xd\xa"	# Windows系の改行コードである
		before_lfcode = 3
	when	"\xa"		# UNIX系の改行コードである
		before_lfcode = 1
	when	"\xd"		# Machintosh系の改行コードである
		before_lfcode = 2
	end


	if before_code == after_code and before_lfcode == linefeed_code
		# 入力と出力のコードが同じなので、内容を転送して終了する
		ret = [0, in_word.clone]
		return ret
	end


	case	before_code
	when	1	# 変換前は、EUCコード
		case	after_code
		when	1	# 変換後は、EUCコード
			# 何もしない
			word1 = in_word
		when	2	# 変換後は、Shift_JISコード
			word1 = Kconv::tosjis(in_word)
		when	3	# 変換後は、UTF-8コード
			word1 = NKF.nkf( '-xm0 --ic=EUC-JP --oc=UTF-8', in_word )
		when	4	# 変換後は、JISコード
			word1 = Kconv::tojis(in_word)
		else
			ret = [-2, nil, '変換後文字コードの指定が不正です(after_code==[' + String(after_code) + '])']
			return ret
		end
	when	2	# 変換前は、Shift_JISコード
		case	after_code
		when	1	# 変換後は、EUCコード
			word1 = Kconv::toeuc(in_word)
		when	2	# 変換後は、Shift_JISコード
			# 何もしない
			word1 = in_word
		when	3	# 変換後は、UTF-8コード
			word1 = NKF.nkf( '-xm0 --ic=CP932 --oc=UTF-8', in_word )
		when	4	# 変換後は、JISコード
			word1 = Kconv::tojis(in_word)
		else
			ret = [-2, nil, '変換後文字コードの指定が不正です(after_code==[' + String(after_code) + '])']
			return ret
		end
	when	3	# 変換前は、UTF-8コード
		case	after_code
		when	1	# 変換後は、EUCコード
			word1 = NKF.nkf( '-xm0 --ic=UTF-8 --oc=EUC-JP', in_word )
		when	2	# 変換後は、Shift_JISコード
			word1 = NKF.nkf( '-xm0 --ic=UTF-8 --oc=CP932', in_word )
		when	3	# 変換後は、UTF-8コード
			# 何もしない
			word1 = in_word
		when	4	# 変換後は、JISコード
			word1 = NKF.nkf( '-xm0 --ic=UTF-8 --oc=ISO-2022-JP', in_word )
		else
			ret = [-2, nil, '変換後文字コードの指定が不正です(after_code==[' + String(after_code) + '])']
			return ret
		end
	when	4	# 変換前は、JISコード
		case	after_code
		when	1	# 変換後は、EUCコード
			word1 = Kconv::toeuc(in_word)
		when	2	# 変換後は、Shift_JISコード
			word1 = Kconv::tosjis(in_word)
		when	3	# 変換後は、UTF-8コード
			word1 = NKF.nkf( '-xm0 --ic=ISO-2022-JP --oc=UTF-8', in_word )
		when	4	# 変換後は、JISコード
			# 何もしない
			word1 = in_word
		else
			ret = [-2, nil, '変換後文字コードの指定が不正です(after_code = [' + String(after_code) + '])']
			return ret
		end
	else
		ret = [-1, nil, '変換前文字コードの指定が不正です(before_code = [' + String(before_code) + '])']
		return ret
	end


	# 改行コードの変換
	case	before_lfcode
	when	1	# 改行前のコードは、UNIX系改行コード(LF(0xa)のみ)
		case	linefeed_code
		when	1	# 改行後のコードは、UNIX系改行コード(LF(0xa)のみ)
			# 何もしない
			word2 = word1
		when	2	# 改行後のコードは、Machintosh系改行コード(CR(0xd)のみ)
			word2 = word1.gsub(/\xa/, "\xd")
		when	3	# 改行後のコードは、Windows系改行コード(CR(0xd)+LF(0xa))
			word2 = word1.gsub(/\xa/, "\xd\xa")
		else
			ret = [-4, nil, '変換後改行コードの指定が不正です(linefeed_code = [' + String(linefeed_code) + '])']
			return ret
		end
	when	2	# 改行前のコードは、Machintosh系改行コード(CR(0xd)のみ)
		case	linefeed_code
		when	1	# 改行後のコードは、UNIX系改行コード(LF(0xa)のみ)
			word2 = word1.gsub(/\xd/, "\xa")
		when	2	# 改行後のコードは、Machintosh系改行コード(CR(0xd)のみ)
			# 何もしない
			word2 = word1
		when	3	# 改行後のコードは、Windows系改行コード(CR(0xd)+LF(0xa))
			word2 = word1.gsub(/\xd/, "\xd\xa")
		else
			ret = [-4, nil, '変換後改行コードの指定が不正です(linefeed_code = [' + String(linefeed_code) + '])']
			return ret
		end
	when	3	# 改行前のコードは、Windows系改行コード(CR(0xd)+LF(0xa))
		case	linefeed_code
		when	1	# 改行後のコードは、UNIX系改行コード(LF(0xa)のみ)
			word2 = word1.gsub(/\xd\xa/, "\xa")
		when	2	# 改行後のコードは、Machintosh系改行コード(CR(0xd)のみ)
			word2 = word1.gsub(/\xd\xa/, "\xd")
		when	3	# 改行後のコードは、Windows系改行コード(CR(0xd)+LF(0xa))
			# 何もしない
			word2 = word1
		else
			ret = [-4, nil, '変換後改行コードの指定が不正です(linefeed_code = [' + String(linefeed_code) + '])']
			return ret
		end
	else
		ret = [-3, nil, '変換前改行コードの指定が不正です(before_lfcode = [' + String(before_lfcode) + '])']
		return ret
	end

# ****************************************
$stderr.puts '[word_code_conversion] End'			if @jcnv_debug == 1
# $stderr.puts 'word2 = [' + word2 + ']'
# ****************************************

	ret = [0, word2]
	return ret
end


# ------------------------------------------------------------

#----- Main --------------------------------------------------

if __FILE__ == $0
	# このスクリプトを単独で起動した

	# １番目にヘルプ表示をしてほしい指定があれば、ヘルプ表示
	case	in_file
	when	nil, '', /--help/i, /-\?/i, /\/\?/
		$stderr.puts 'このスクリプトは、XMLのコードを変換するスクリプトです'
		$stderr.puts ''
		$stderr.puts 'orca_jcnv.rb [in_file] [out_code] [mode]'
		$stderr.puts ''
		$stderr.puts '  in_file  - 変換対象ファイル'
		$stderr.puts ''
		$stderr.puts '  out_code - 変換したい文字コード'
		$stderr.puts '    EUC-JP / Shift_JIS / UTF-8 / JIS'
		$stderr.puts ''
		$stderr.puts '  mode     - 変換実行モード'
		$stderr.puts '     -n  normal mode / -f  force mode'
		$stderr.puts ''
		$stderr.puts ''
		$stderr.puts '出力先は、標準出力です'
		exit
	end


	# ファイルの読み込み
	word = ''
	open(in_file, 'rb') do |fp_i|
		word = fp_i.read
	end
	if word == nil or word == ''
		$stderr.puts 'XMLファイルの読み込みに失敗しました'
		exit 2
	end


	# 文字コードの数値への変換
	case	out_code
	when	/euc/i, /euc-jp/i
		out_codenum = 1
		ret_codenum = 1
	when	/shift-jis/i, /shift_jis/i, /sjis/i, /s-jis/i
		out_codenum = 2
		ret_codenum = 3		# Machintosh系改行コードには、未対応
	when	/utf-8/i, /utf8/i
		out_codenum = 3
		ret_codenum = 1
	when	/jis/i
		out_codenum = 4
		ret_codenum = 3
	end


	# 実行モードの変換
	case	mode
	when	nil, '', /-n/i, /-normal/i
		# 通常実行モード
		exec_mode = 1
	when	/-f/i, /-force/i
		# エラーがあっても強制実行
		exec_mode = 2
	end


	ret = [-1, '', nil]
	# XMLデータの文字コード変換処理
	ret = xml_code_conversion(word, out_codenum, ret_codenum, exec_mode)
	if ret[0] != 0
		# エラーが発生した
		$stderr.puts 'コンバートに失敗しました'
		$stderr.puts ''
		$stderr.puts ret[2]
		exit 2
	end


#	# 標準出力に、結果を出力
#	$stdout.print String(ret[1])


	open(out_file, 'wb') do |fp_i|
		fp_i.print ret[1]
	end

end
